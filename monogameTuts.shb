Monogame For Impatient Developers,tutsStyle.css

addContainer;
padding;
heading(text:Monogame for the Impatient Developer,class:blueText largeFont textShadow,id:blink);
rowStart;{class:borderBottom lightGreenText}
<p class="main">
This is a guide for those who want to learn Monogame but just want to know the bare essentials to get running.  The target audience are those who can already code or know C#.  Also if you are a game developer currently using something else and are simply wanting to get familiar with Monogame, this might be for you.<br><br>
Whenever I look at a framework, engine or guide I like to see the results of what can be done using it.  Below are some examples of projects I have made.
<br><a class="blueText" href="#started">Skip examples.</a>
</p>
rowEnd;
addContainer;
subHeading(text:Example Projects,class:blueText mediumFont textShadow,id:examples);
rowStart;
<iframe src='https://gfycat.com/ifr/ShockedHideousBobolink' frameborder='0' scrolling='no' allowfullscreen width='640' height='360'></iframe>
rowEnd;
addContainer;
addImage(TutorialImages/boot.gif);
addImage(TutorialImages/dungeon.gif);
addImage(TutorialImages/editor.gif);
addImage(TutorialImages/fps.gif);
addImage(TutorialImages/modelViewer.gif);

rowStart;{class:borderBottom}
rowEnd;

addContainer;
subHeading(text:Getting Started,class:blueText mediumFont textShadow,id:started);
rowStart;{class:lightGreenText}
<p class="main">
This will focus on using Windows for development.  I myself use Win 7 (I know, I know) and Visual Studio 2015 but Visual Studio 2017 should work fine.
Head to this link and download <a class="blueText" href="http://www.monogame.net/downloads/">Monogame 3.6</a><br><br>

Run the installer and just yes through everything.  You can install through NUGET, which I believe lets you choose specific template types. The installer simply installs all template types.
</p>
rowEnd;

addContainer;

subHeading(text:Project Setup,class:blueText mediumFont textShadow,id:);
rowStart;{class:lightGreenText}
<p class="main">
So once all that is installed, simply fire up VS and create a new project.  I use the “Cross Platform Desktop Project” as the projects I'm developing require it.  This guide will use that template, but everything should work with the “Windows project” template. <i>(Disclaimer: I have not tested it.)</i> <br><br>
Choose the cross-platform project:
</p>
rowEnd;
addImage(TutorialImages/Setup/00.png);

rowStart;{class:lightGreenText}
<p class="main">
We now have our project.  If you press run, you should see the following:
</p>
rowEnd;

addImage(TutorialImages/Setup/01.png);

rowStart;{class:lightGreenText borderBottom}
<p class="main">
The project consists of two source files: <b>Program.cs</b> and <b>Game1.cs</b>.  <b>Program.cs</b> contains the Main method and <b>Game1.cs</b> is where the magic happens.
I won't run through the code as its very well documented and this is for impatient people so, lets learn by doing.
</p>
rowEnd;


addContainer;

subHeading(text:Loading and displaying Images,class:blueText mediumFont textShadow,id:images);

rowStart;{class:lightGreenText}
<p class="main">
So we're gonna put this lil guy on screen and make him move about:
</p>
rowEnd;

addImageCentered(TutorialImages/LoadingImages/00.png);

rowStart;{class:lightGreenText}
<p class="main">
There's a few ways we can load resources (images/audio) but we'll use the ContentManager (Pipeline Tool).  If you open up your Content Folder and double click “Content.mgcb”.  It'll open up the manager.  
Right-click on “Content” and select “Add → Existing Item” and choose your image.
</p>
rowEnd;

addImage(TutorialImages/LoadingImages/01.png);

rowStart;{class:lightGreenText}
<p class="main">
Then save (ctrl-s).  You can build it if you like, but this is done automatically when you build the project.<br><br>
Now, go to Game1.cs. Create a Texture2D member:
rowEnd;

codeStart;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace MyAwesomeGame
{

  public class  Game1  :  Game 
  {

   GraphicsDeviceManager graphics;
   SpriteBatch spriteBatch;
   Texture2D boxman;

    public  Game1()
    {
      graphics = new  GraphicsDeviceManager( this );
      Content.RootDirectory = "Content"; 
    }
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Find the LoadContent method and load the image like so:
</p>
rowEnd;

codeStart;
protected override void LoadContent()
{
  spriteBatch = new SpriteBatch (GraphicsDevice);
  boxman =  Content.Load<Texture2D>("boxman");
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Note that you do not need to specify the file extension (i.e: "boxman", not "boxman.png").<br>  It can be a good idea to keep track of images within Visual Studio by adding them to the project.<br><br>
Finally, draw the image:
</p>
rowEnd;


codeStart;
protected override void Draw( GameTime gameTime)
{
  GraphicsDevice.Clear(Color.CornFlowerBlue);

  spriteBatch.Begin();
  spriteBatch.Draw(boxman, new Vector2(200,200),Color.White);
  spriteBatch.End();

  base.Draw(gameTime);
}
codeEnd;
addContainer;
rowStart;{class:lightGreenText}
<p class="main">
<br>Hit run and voila, we have our image on screen.<br><br>
It should be noted that Texture2Ds need to call the Dispose() method when no longer needed as they are an unmanaged resource.  This is usually done in the UnloadContent() method.  Obviously, though, you should know when you no longer need a resource or object.<br><br>
The complete code for <a class="blueText" href="TutorialSource/LoadingImages.cs">Game1.cs</a>
</p>
rowEnd;

addImage(TutorialImages/LoadingImages/05.png);{class:borderBottom}
rowStart;{class:borderBottom}
rowEnd;



padding;
addContainer;
subHeading(text:Controls (Keyboard),class:blueText mediumFont textShadow,id:keyboard);
rowStart;{class:lightGreenText}
<p class="main">
We'll start off using keyboard input.  I'll go through other means later on.<br><br>

Create a Vector2 member which is boxman's position.
</p>
rowEnd;

codeStart;
namespace MyAwesomeGame
{
  public class Game1 :Game
  {

   GraphicsDeviceManager graphics;
   SpriteBatch spriteBatch;
   Texture2D boxman;
   Vector2 boxmanPos = new Vector2(200,200);
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
And make sure it is used in the draw call.
</p>
rowEnd;

codeStart;
protected override void Draw( GameTime gameTime)
{
  GraphicsDevice .Clear(Color.CornFlowerBlue);

  spriteBatch.Begin();
  spriteBatch.Draw(boxman, boxmanPos, Color.White);
  spriteBatch.End();

  base.Draw(gameTime);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Add the following code to the Update method.
</p>
rowEnd;

codeStart;
protected override void Update( GameTime gameTime)
{
 float dt = ( float )gameTime.ElapsedGameTime.TotalSeconds;

   if (Keyboard.GetState().IsKeyDown(Keys.Up))
    boxmanPos.Y -= 100.0f * dt;
   if (Keyboard.GetState().IsKeyDownKeys.Down))
    boxmanPos.Y += 100.0f * dt;

  base.Update(gameTime);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText borderBottom}
<p class="main">
All thats needed is to query the keyboard state and modify the position based on input.  This is incredibly rough, but its just to get you started.<br>  The Monogame functions are easy enough to wrap into On-press and On-release functions.  I'll cover this in a later guide. 
<br><br>Full source available <a class="blueText" href="TutorialSource/KeyboardInput.cs">here.</a>
</p>
rowEnd;


padding;
addContainer;
subHeading(text:Audio,class:blueText mediumFont textShadow,id:audio);
rowStart;{class:lightGreenText}
<p class="main">
Again, we'll be using the Pipeline Tool.  I'll be using a sound file from my game, feel free to use any mp3 or ogg file.  Most file formats are supported. <br>
The process is basically the same as loading images.<br> Open the Pipeline Tool, right-click on "Content" in the project window > add existing item and select your file.<br><br>

Ensure you have the processor correctly set to SoundEffect:
</p>
rowEnd;

addImage(TutorialImages/Audio/00.png);

rowStart;{class:lightGreenText}
<p class="main">
Save before you close (ctrl-s).<br><br>
Add a <i>SoundEffect</i> and an <i>SoundEffectInstance</i> member, for this you'll need to import “Microsoft.Xna.Framework.Audio”.
</p>
rowEnd;

codeStart;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;

namespace MyAwesomeGame
{

  public class  Game1  :  Game 
  {

   GraphicsDeviceManager graphics;
   SpriteBatch spriteBatch;
   Texture2D boxman;
   Vector2 boxmanPos = new Vector2(200,200);

   SoundEffect  sfx;
   SoundEffectInstance sfxInstance;
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Initialise the sfx member:
</p>
rowEnd;


codeStart;
protected override void LoadContent()
{
  spriteBatch = new SpriteBatch (GraphicsDevice );
  boxman =  Content.Load<Texture2D>("boxman");
  sfx =  Content.Load<SoundEffect >("sfx_voice_00");
  sfxInstance = sfx.CreateInstance();
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
The <i>SoundEffectInstance</i> is not required.  You can solely use the <i>SoundEffect</i> but, an instance allows better control and has queryable state.  They're kind of analogous to Texture and Sprite.<br> 
All thats left to do is hook up a key to play our sound:
</p>
rowEnd;

codeStart;
protected override void Update( GameTime gameTime)
{
 float dt = ( float )gameTime.ElapsedGameTime.TotalSeconds;

   if (Keyboard.GetState().IsKeyDown(Keys.Up))
    boxmanPos.Y -= 100.0f * dt;
   if (Keyboard.GetState().IsKeyDownKeys.Down))
    boxmanPos.Y += 100.0f * dt;

  if (Keyboard.GetState().IsKeyDown(Keys.Space))
  {
    if (sfxInstance.State != SoundState.Playing)
     sfxInstance.Play();
  }

  base.Update(gameTime);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
<br><br>Just like <i>Texture2D</i>, <i>SoundEffect</i>s need to be disposed of. <br>Full source available <a class="blueText" href="TutorialSource/Audio.cs">here.</a>
</p>
rowEnd;

navBarStart(text:Monogame Guides,home:monogameTuts.html);
  navDropdown(text:Basics);
    navLink(text:Example Projects,link:monogameTuts.html#examples);
    navLink(text:Getting Started,link:monogameTuts.html#started);
    navLink(text:Images & Sprites,link:monogameTuts.html#images);
    navLink(text:Controls (Keyboard),link:monogameTuts.html#keyboard);
    navLink(text:Audio,link:monogameTuts.html#audio);
  navDropdownEnd();
  navDropdown(text:Shaders);
    navLink(text:Shaders,link:monogameTuts1.html);
    navLink(text:Matrices,link:monogameTuts1.html#matrices);
    navLink(text:Inputs, Outputs & Samplers,link:monogameTuts1.html#io);
    navLink(text:Shader Functions,link:monogameTuts1.html#shaderfuncs);
    navLink(text:Loading the Shader,link:monogameTuts1.html#loading);
    navLink(text:Drawing with the Shader,link:monogameTuts1.html#shaderdraw);
  navDropdownEnd();
  navDropdown(text:Coming Soon);
    navLink(text:Advanced Input,link:#);
    navLink(text:RenderTargets & Culling,link:#);
    navLink(text:2D Camera,link:#);
    navLink(text:3D Camera,link:#);
  navDropdownEnd();  
  navLink(text:Magellanic Games,link:index.html);
  navLink(text:About,link:About.html);
navBarEnd();

addContainer;
padding;

addFooter(email:magellanicDev@gmail.com,date:26/08/2018,copy:Liam Charalambous,class:lightGreenText);
rowStart;
<a class="navLink" href="https://www.facebook.com/MagellanicGames"><b class="blueText">Facebook</b> <span class="glyphicon glyphicon-thumbs-up"> </span></a>
rowEnd;
padding;