Monogame For Impatient Developers,tutsStyle.css

addContainer;
padding;
heading(text:Shaders,class:blueText largeFont textShadow,id:shaders);
rowStart;{class:lightGreenText borderBottom}
<p class="main">
So in the other <a class="blueText" href="monogameTuts.html#images">guide</a> we used Monogame's in-built spritebatch to draw our sprite/texture/image on to the screen.  Its a perfectly good method, but sometimes you just want to do your own shaders.<br>
In this tutorial we'll be using the <i>Effect</i> class, but before that we need to write a simple shader.<br><br>
Create a new file in your Content folder and call it <b>"shader.fx"</b>.  
<small><small class="blueText">(Monogame does have predefined shaders, but I'll cover those another time)</small></small>
</p>
rowEnd;


subHeading(text:Matrices,class:blueText mediumFont textShadow,id:matrices);
rowStart;{class:lightGreenText}
<p class="main">
I won't go into the nitty gritty about matrices here.  All I'll say is we need 3 of them.  They are used to calculate the point at which pixels are drawn on screen.  <br><br>Define the matrices and a Texture2D as follows in your <b>shader.fx</b>.
</p>
rowEnd;

codeStart;
float4x4 World;
float4x4 View;
float4x4 Projection;  

Texture2D SpriteSheet;
codeEnd;

addContainer;
rowStart;{class:lightGreenText borderBottom}
<p class="main">
The three matrices purposes:
<ul>
  <li><b>World</b> - Also known as the Model matrix, is used for determining the position of an object in the world e.g. (0,0,0) - origin</li>
  <li><b>View</b> - Think of this simply as where your eye/camera in the world is.  </li>
  <li><b>Projection</b> - Usually orthographic or perspective.  If perspective then the further away something is the smaller it will appear.  Orthographic does not do this perspective divide and so no matter how "far" away something is from the View, it'll be appear the same size.  Good for 2D.</li>
</ul>
</p>
rowEnd;

subHeading(text:Inputs, Outputs & Samplers,class:blueText mediumFont textShadow,id:io);

rowStart;{class:lightGreenText}
<p class="main">
Next we need a texture sampler so we can colour our pixels correctly on screen (SpriteSheetSampler).<br><br>
The VertextShaderInput is the data passed from our game through to the video card so we can calculate where things need to be drawn.<br><br>
The VertexShaderOutput contains the final pixel position and that pixel's colour once our shader has finished its calculations.
</p>
rowEnd;

codeStart;
SamplerState SpriteSheetSampler
{
  Filter = None;
  AddressU = Wrap;
  AddressV = Wrap;
  Texture = (SpriteSheet);
};

struct VertexShaderInput
{
  float4 Position : POSITION0;
  float4 Normal : NORMAL0;
  float2 TextureUV : TEXCOORD0;

};

struct VertexShaderOutput
{
  float4 Position : POSITION0;
  float2 TextureUV : TEXCOORD0;
};
codeEnd;

addContainer;
rowStart;{class:borderBottom}
rowEnd;
subHeading(text:Vertex and Pixel Shader Functions,class:blueText mediumFont textShadow,id:shaderfuncs);

rowStart;{class:lightGreenText}
<p class="main">
The VertexShaderFunction is where we do the calculations to determine where the pixel is on screen.  These calulations take the data from the input and we store the results in the VertexShaderOutput object.<br><br><br>
The PixelShaderFunction determines the colour of the pixel based on the position of texture's UV co-ordinates.
</p>
rowEnd;

codeStart;
VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
  VertexShaderOutput output;

  float4 worldPosition = mul(input.Position, World);
  float4 viewPosition = mul(worldPosition, View);
  output.Position = mul(viewPosition, Projection);
  output.TextureUV = input.TextureUV;
  return output;
}

float4 PixelShaderFunction(VertexShaderOutput input) : COLOR0
{
  return tex2D(SpriteSheetSampler, input.TextureUV);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
<br><br>
Finally we specify the technique.  These enable us to use multiple shading functions with a single draw call. I.e pass1: draw scene , pass2: draw outlines.  For this example, though, we'll just be using a single pass.
</p>
rowEnd;

codeStart;
technique basic 
{
  pass Pass1
  {
    VertexShader = compile vs_2_0 VertexShaderFunction();
    PixelShader = compile ps_2_0 PixelShaderFunction();
  }
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText borderBottom}
<p class="main">
With all that now defined in our <b>shader.fx</b> file, we can begin loading it into our program and drawing to the screen.  As usual, here is the <a class="blueText" href="TutorialSource/shader.fx">source</a>.
</p>
rowEnd;

subHeading(text:Loading the shader into the Project,class:blueText mediumFont textShadow,id:loading);

rowStart;{class:lightGreenText}
<p class="main">
With the complete shader, it is time to import it first into the Pipeline Tool.  This process is exactly the same as for images.
</p>
rowEnd;

addImage(TutorialImages/LoadingImages/01.png);

rowStart;{class:lightGreenText}
<p class="main">
Press F6 to build it and check there are no error messages.  The build is done when activated in Visual Studio, but the error messages are rather cryptic.  It is best to build shaders in the pipeline tool to get understandable error messages.  (If you think there is a chance that you made an error)<br><br>

We'll now head back to our Visual studio project.  You can either use the project created from the <a class="blueText" href="monogameTuts.html#started">basics guide</a> or just create a new one using the "Cross-platform" Monogame template.<br><br>

In the Game class, some more members need to be added.  Ensure your code looks as follows:
</p>
rowEnd;

codeStart;

namespace MyAwesomeGame
{

  public class  Game1  :  Game 
  {

    GraphicsDeviceManager graphics;
    Texture2D       boxman;
    Vector3         boxmanPos = new Vector3(0,0,0);

    VertexBuffer    spriteVertexBuffer;
    Effect          shader;

    Matrix          World;
    Matrix          View;
    Matrix          Projection;

    int screenWidth = 800;
    int screenHeight = 600;

    public  Game1()
    {
      graphics = new GraphicsDeviceManager( this);
      graphics.PreferredBackBufferWidth = screenWidth;
      graphics.PreferredBackBufferHeight = screenHeight;

      Content.RootDirectory = "Content"; 
    }
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
So there are quite a few changes from the basic tutorial but there is nothing too complicated.<br><br>
The first change is the position of boxman to a Vector3.  This can be useful over a Vector2 if you are wanting to easily organise multiple layers.  It will give easier control on the front-to-back order of the entities drawn on screen.  The beauty is, it doesn't have to be used.<br><br>
Initialise our matrices and vertexbuffer:
</p>
rowEnd;

codeStart;
protected override void Initialize()
{
  Matrix.CreateOrthographic(screenWidth, screenHeight, 1000.0f, -1000.0f, out Projection);
  View = Matrix.CreateLookAt( new Vector3(0,0,10),Vector3.Zero, Vector3.Up);

  float width = 0.5f;
  float height = 0.5f;
  float uv = 1f;

  var spriteVertices = new VertexPositionNormalTexture[6];

  spriteVertices[0] = new VertexPositionNormalTexture( new Vector3(-width,height,0f),  Vector3.Forward, new Vector2(0,0));
  spriteVertices[1] = new VertexPositionNormalTexture( new Vector3(-width,-height,0f), Vector3.Forward, new Vector2(0,uv));
  spriteVertices[2] = new VertexPositionNormalTexture( new Vector3(width,-height,0f),  Vector3.Forward, new Vector2(uv,uv));
  spriteVertices[3] = new VertexPositionNormalTexture( new Vector3(width,-height,0f),  Vector3.Forward, new Vector2(uv,uv));
  spriteVertices[4] = new VertexPositionNormalTexture( new Vector3(width,height,0f), Vector3.Forward, new Vector2(uv,0));
  spriteVertices[5] = new VertexPositionNormalTexture( new Vector3(-width,height,0f),  Vector3.Forward, new Vector2(0,0));

  spriteVertexBuffer = new  VertexBuffer(graphics.GraphicsDevice,typeof(VertexPositionNormalTexture),6,BufferUsage.WriteOnly);
  spriteVertexBuffer.Name = "Sprite Vertex Buffer";
  spriteVertexBuffer.SetData<VertexPositionNormalTexture>(spriteVertices);

  GraphicsDevice.RasterizerState = RasterizerState.CullClockwise;
  base.Initialize();
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Use the ContentManager to load the shader to our Effect member:
</p>
rowEnd;

codeStart;
protected override void LoadContent()
{
  boxman =  Content.Load<Texture2D>("boxman");
  shader =  Content.Load< Effect>("shader");
}
codeEnd;
addContainer;
rowStart;{class:lightGreenText borderBottom}
rowEnd;

addContainer;
subHeading(text:Drawing with the Shader,class:blueText mediumFont textShadow,id:shaderdraw);
rowStart;{class:lightGreenText}
<p class="main">
Finally, we use it in our draw method.
</p>
rowEnd;

codeStart;
protected override void Draw(GameTime gameTime)
{
      GraphicsDevice .Clear(Color.CornflowerBlue);

      World = Matrix.Identity;
      World *= Matrix.CreateScale(32);
      World *= Matrix.CreateTranslation(boxmanPos);

      shader.Parameters["World"].SetValue(World);
      shader.Parameters["View"].SetValue(View);
      shader.Parameters["Projection"].SetValue(Projection);
      shader.Parameters["SpriteSheet"].SetValue(boxman);

      GraphicsDevice .SetVertexBuffer(spriteVertexBuffer);

      foreach(EffectPass pass in shader.CurrentTechnique.Passes)
      {
        pass.Apply();
        GraphicsDevice .DrawPrimitives(PrimitiveType.TriangleList,0,4);
      }

      base.Draw(gameTime);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
The World matrix is essentially the matrix for our sprite.  It is translated using the position.  A scale of 32 is used so that 1 unit is equal to 1 pixel (in this particular instance). <br>
The shader.Parameters are the variables/data passed to the graphics card to do our drawing, and finally the scene is drawn.  You should see the same as the image below.  <a class="blueText" href="TutorialSource/SimpleShader.cs">Source available here.</a>
</p>

rowEnd;
addImage(TutorialImages/Shaders/04.png);
addContainer;
navBarStart(text:Monogame Guides,home:monogameTuts.html);
  navDropdown(text:Basics);
    navLink(text:Basics,link:monogameTuts.html);
    navLink(text:Getting Started,link:monogameTuts.html#started);
    navLink(text:Images & Sprites,link:monogameTuts.html#images);
    navLink(text:Controls (Keyboard),link:monogameTuts.html#keyboard);
    navLink(text:Audio,link:monogameTuts.html#audio);
  navDropdownEnd();
  navDropdown(text:Shaders);
    navLink(text:Shaders,link:monogameTuts1.html);
    navLink(text:Matrices,link:monogameTuts1.html#matrices);
    navLink(text:Inputs, Outputs & Samplers,link:monogameTuts1.html#io);
    navLink(text:Shader Functions,link:monogameTuts1.html#shaderfuncs);
    navLink(text:Loading the Shader,link:monogameTuts1.html#loading);
    navLink(text:Drawing with the Shader,link:monogameTuts1.html#shaderdraw);
  navDropdownEnd();
  navDropdown(text:Coming Soon);
    navLink(text:Advanced Input,link:#);
    navLink(text:RenderTargets & Culling,link:#);
    navLink(text:2D Camera,link:#);
    navLink(text:3D Camera,link:#);
  navDropdownEnd();  
  navLink(text:Magellanic Games,link:index.html);
  navLink(text:About,link:About.html);
navBarEnd();




addContainer;
padding;

addFooter(email:magellanicDev@gmail.com,date:27/08/2018,copy:Liam Charalambous,class:lightGreenText);
rowStart;
<a class="navLink" href="https://www.facebook.com/MagellanicGames"><b class="blueText">Facebook</b> <span class="glyphicon glyphicon-thumbs-up"> </span></a>
rowEnd;
padding;