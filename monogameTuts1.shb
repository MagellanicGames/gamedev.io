Monogame For Impatient Developers,tutsStyle.css

addContainer;
padding;
heading(text:Shaders,class:blueText largeFont textShadow,id:shaders);
rowStart;{class:lightGreenText borderBottom}
<p class="main">
So in the other <a class="blueText" href="monogameTuts.html#images">guide</a> we used Monogame's in-built spritebatch to draw our sprite/texture/image on to the screen.  Its a perfectly good method, but sometimes you simply want to do your own shaders.  It can be easier to do effects, lighting and filtering this way.<br>
In this tutorial we'll be using the <i>Effect</i> class.  First off, lets write a simple shader.<br><br>
Create a new file in your Content folder and call it <b>"shader.fx"</b>.  
</p>
rowEnd;


subHeading(text:Matrices,class:blueText mediumFont textShadow,id:matrices);
rowStart;{class:lightGreenText}
<p class="main">
I won't go into the nitty gritty about matrices here.  All I'll say is we need 3 of them.  They are used to calculate the point at which pixels are drawn on screen.  <br><br>Define the matrices and a Texture2D as follows in your <b>shader.fx</b>.
</p>
rowEnd;

addImage(TutorialImages/Shaders/00.png);

rowStart;{class:lightGreenText borderBottom}
<p class="main">
The three matrices purposes are as follows:
<ul>
  <li><b>World</b> - Also known as the Model matrix, is used for determining the position of an object in the world e.g. (0,0,0) - origin</li>
  <li><b>View</b> - Think of this simply as where your eye/camera in the world is.  </li>
  <li><b>Projection</b> - Usually orthographic or perspective.  If perspective then the further away something is the smaller it will appear.  Orthographic does not do this perspective divide and so no matter how "far" away something is from the View, it'll be appear the same size.  Good for 2D.</li>
</ul>
</p>
rowEnd;

subHeading(text:Inputs, Outputs & Samplers,class:blueText mediumFont textShadow,id:io);

rowStart;{class:lightGreenText}
<p class="main">
Next we need a texture sampler so we can colour our pixels the correctly on screen (SpriteSheetSampler).<br><br>
The VertextShaderInput is the data passed from our game through to the video card so we can calculate where things need to be drawn.<br><br>
The VertexShaderOutput contains the final pixel position and that pixel's colour once our shader has finished its calculations.
</p>
rowEnd;
addImage(TutorialImages/Shaders/01.png);
rowStart;{class:borderBottom}
rowEnd;
subHeading(text:Vertex and Pixel Shader Functions,class:blueText mediumFont textShadow,id:shaderfuncs);

rowStart;{class:lightGreenText}
<p class="main">
The VertexShaderFunction is where we do the calculations to determine where the pixel is on screen.  These calulations take the data from the input and we store the results in the VertexShaderOutput object.<br><br><br>
The PixelShaderFunction determines the colour of the pixel based on the position of texture's UV co-ordinates.
</p>
rowEnd;

addImage(TutorialImages/Shaders/02.png);

rowStart;{class:lightGreenText}
<p class="main">
<br><br>
Finally we specify the technique.  These enable use to multiple shading functions with a single draw call. I.e pass1: draw scene , pass2: draw outlines.  For this example, though, we'll just be using a single pass.
</p>
rowEnd;

addImage(TutorialImages/Shaders/03.png);

rowStart;{class:lightGreenText borderBottom}
<p class="main">
With all that now defined in our <b>shader.fx</b> file, we can begin loading it into our program and drawing to the screen.  As usual, here is the <a class="blueText" href="TutorialSource/shader.fx">source</a>.
</p>
rowEnd;

subHeading(text:Loading the shader into the Project,class:blueText mediumFont textShadow,id:loading);

rowStart;{class:lightGreenText}
<p class="main">
<br><br>(To be continued)
</p>
rowEnd;

navBarStart(text:Monogame Guides,home:#blink);
  navDropdown(text:Basics);
    navLink(text:Basics,link:monogameTuts.html);
    navLink(text:Getting Started,link:monogameTuts.html#started);
    navLink(text:Images & Sprites,link:monogameTuts.html#images);
    navLink(text:Controls (Keyboard),link:monogameTuts.html#keyboard);
    navLink(text:Audio,link:monogameTuts.html#audio);
  navDropdownEnd();
  navDropdown(text:Shaders);
    navLink(text:Shaders,link:monogameTuts1.html);
    navLink(text:Matrices,link:monogameTuts1.html#matrices);
    navLink(text:Inputs, Outputs & Samplers,link:monogameTuts1.html#io);
    navLink(text:Shader Functions,link:monogameTuts1.html#shaderfuncs);
    navLink(text:Loading the Shader,link:monogameTuts1.html#loading);
  navDropdownEnd();
  navLink(text:Magellanic Games,link:index.html);
  navLink(text:About,link:About.html);
navBarEnd();

addContainer;
padding;

addFooter(email:magellanicDev@gmail.com,date:23/08/2018,copy:Liam Charalambous,class:lightGreenText);
rowStart;
<a class="navLink" href="https://www.facebook.com/MagellanicGames"><b class="blueText">Facebook</b> <span class="glyphicon glyphicon-thumbs-up"> </span></a>
rowEnd;
padding;