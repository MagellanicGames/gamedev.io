Advanced Input - Monogame For Impatient Developers,tutsStyle.css

addContainer;
padding;
heading(text:Advanced Input,class:blueText largeFont textShadow,id:);
rowStart;{class:borderBottom lightGreenText}
<p class="main">
In the <a class="blueText" href="monogameTuts.html#keyboard">Basics</a> we covered really basic keyboard input.  This guide will show how we can improve on that to have some keyboard controls that are more robust. Also, some much needed mouse input.<br>
You can use the Basic or Shader tutorial as a base for this.  We'll be adding a new class and calling it in the Update method of the Game class.
</p>
rowEnd;

subHeading(text:Keyboard OnPressed & OnReleased,class:blueText mediumFont textShadow,id:keyboardon);
rowStart;{class:lightGreenText}
<p class="main">
First up, create a new class called Controls:
</p>
rowEnd;

codeStart;
public  static  class  Controls 
{
	private  static   List < bool > mKeys = new  List < bool >();

	 static   Controls ()
	{
		 for (int i = 0; i < ( int )Keys.F12; i++)
		{
			mKeys.Add(false);
		}
	}
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Next define an OnKeyPressed method that takes a Key enum
</p>
rowEnd;

codeStart;
public  static   bool  OnKeyPressed(Keys key)
{
	int k = ( int )key;
	KeyboardState keyState = Keyboard.GetState();
	 if (keyState.IsKeyDown(key) == true && mKeys[k] == false)
	{
		mKeys[k] = true;
		return true;
	}
	 if (keyState.IsKeyDown(key) == false && mKeys[k] == true)
	{
		mKeys[k] = false;
		return false;
	}
	return false;
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
What the OnPressed function does is store what key has been pressed as well as returning if the queried key was pressed.<br>
The logging of the previous state is integral to making the OnReleased functionality work.<br><br>
Next define the OnReleased function.
</p>
rowEnd;

codeStart;
public  static   bool  OnKeyReleased(Keys key)
{
	int k = (int )key;
	KeyboardState keyState = Keyboard.GetState();
	 if (keyState.IsKeyDown(key) && mKeys[k] == false)
	{
		mKeys[k] = true;
		return false;
	}
	 if (keyState.IsKeyDown(key) == false && mKeys[k] == true)
	{
		mKeys[k] = false;
		return true;
	}
	return false;
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class="main">
Essentially the OnReleased is the opposite to the OnPressed.  We check any recorded key presses and compare against what is currently being pressed (or not pressed).  This allows us to now trigger code based on either the press, or release of a key.<br><br>
One important thing to note is that anywhere that you call OnPressed, you must also subsequentially call OnReleased else you'll end up with unexpected behaviour.  The reason being that if Onreleased is not called, it never stores that a key was released and so other code could activate based on the OnPressed.
</p>
rowEnd;

rowStart;{class:lightGreenText}
<p class="main">
Finally, we can't forget the simple IsPressed function:
</p>
rowEnd;

codeStart;
public  static   bool  IsKeyPressed(Keys key)
{
	KeyboardState keyState = Keyboard.GetState();
	return keyState.IsKeyDown(key);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText borderTop}
rowEnd;
subHeading(text:Using the Controls class,class:blueText mediumFont textShadow,id:controls);
rowStart;{class:lightGreenText}
<p class="main">
With that all done, move back over to the Game class' Update method and we'll make our newly defined methods move our image around.  Add the following code:
</p>
rowEnd;

codeStart;
protected override void Update( GameTime gameTime)
{
	float dt = ( float )gameTime.ElapsedGameTime.TotalSeconds;
	float speed = 200.0f;

	 if ( Controls .OnKeyPressed(Keys.Up))
		boxmanPos.Y += speed * dt;

	 if ( Controls .OnKeyReleased(Keys.Down))
		boxmanPos.Y -= speed * dt;

	 if ( Controls .IsKeyPressed(Keys.Right))
		boxmanPos.X += speed * dt;
	
	 base.Update(gameTime);
}
codeEnd;

addContainer;
rowStart;{class:lightGreenText}
<p class=main>
So if you use the following code what should happen is when you press up, the sprite should move up once (ie. you have to keep tapping).<br>
When pressing down, the sprite should only move once the key has been pressed and released.<br>
If you hold down right, the sprite should keep moving (like in the basics tutorial). <a class="blueText" href="ControlsSource.html">Full source.</a>
</p>
rowEnd;

addContainer;


importPartial(Partials/navbarGuidesTmp.shbp);
importPartial(Partials/footer.shbp);